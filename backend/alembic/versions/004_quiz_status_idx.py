"""Update quiz status and indices

Revision ID: 004_quiz_status_idx
Revises: 003_game_tracking
Create Date: 2025-07-05 09:20:44.658742

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "004_quiz_status_idx"
down_revision: Union[str, None] = "003_game_tracking"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Apply migration."""
    # Create the enum type if it does not exist
    quizstatus_enum = postgresql.ENUM(
        "DRAFT", "PUBLISHED", "ARCHIVED", name="quizstatus"
    )
    quizstatus_enum.create(op.get_bind(), checkfirst=True)
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("badge_title_key"), "badge", type_="unique")
    op.drop_constraint(op.f("emailtokens_token_key"), "emailtokens", type_="unique")
    op.drop_index(op.f("idx_gamesession_quiz_id"), table_name="gamesession")
    op.drop_index(op.f("idx_gamesession_topic_id"), table_name="gamesession")
    op.drop_index(op.f("ix_playeranswer_game_session_id"), table_name="playeranswer")
    op.create_index(
        op.f("ix_playeranswer_session_id"), "playeranswer", ["session_id"], unique=False
    )
    # Remove default before type change
    op.alter_column("quiz", "status", server_default=None)
    op.alter_column(
        "quiz",
        "status",
        existing_type=sa.VARCHAR(length=20),
        type_=quizstatus_enum,
        existing_nullable=False,
        postgresql_using="status::quizstatus",
    )
    # Set new default after type change
    op.alter_column("quiz", "status", server_default=sa.text("'DRAFT'"))
    op.drop_index(op.f("idx_quiz_status"), table_name="quiz")
    op.drop_constraint(op.f("role_name_key"), "role", type_="unique")
    op.drop_constraint(op.f("topic_title_key"), "topic", type_="unique")
    op.drop_constraint(op.f("user_email_key"), "user", type_="unique")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Revert migration."""
    quizstatus_enum = postgresql.ENUM(
        "DRAFT", "PUBLISHED", "ARCHIVED", name="quizstatus"
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(
        op.f("user_email_key"), "user", ["email"], postgresql_nulls_not_distinct=False
    )
    op.create_unique_constraint(
        op.f("topic_title_key"), "topic", ["title"], postgresql_nulls_not_distinct=False
    )
    op.create_unique_constraint(
        op.f("role_name_key"), "role", ["name"], postgresql_nulls_not_distinct=False
    )
    op.create_index(op.f("idx_quiz_status"), "quiz", ["status"], unique=False)
    op.alter_column(
        "quiz",
        "status",
        existing_type=quizstatus_enum,
        type_=sa.VARCHAR(length=20),
        existing_nullable=False,
        existing_server_default=sa.text("'draft'::character varying"),
    )
    op.drop_index(op.f("ix_playeranswer_session_id"), table_name="playeranswer")
    op.create_index(
        op.f("ix_playeranswer_game_session_id"),
        "playeranswer",
        ["session_id"],
        unique=False,
    )
    op.create_index(
        op.f("idx_gamesession_topic_id"), "gamesession", ["topic_id"], unique=False
    )
    op.create_index(
        op.f("idx_gamesession_quiz_id"), "gamesession", ["quiz_id"], unique=False
    )
    op.create_unique_constraint(
        op.f("emailtokens_token_key"),
        "emailtokens",
        ["token"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_unique_constraint(
        op.f("badge_title_key"), "badge", ["title"], postgresql_nulls_not_distinct=False
    )
    # ### end Alembic commands ###
