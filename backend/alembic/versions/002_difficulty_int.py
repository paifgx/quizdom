"""Change difficulty column to Integer

Revision ID: 002_difficulty_int
Revises: 001_implement_erm
Create Date: 2025-06-29 13:28:43.744158

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "002_difficulty_int"
down_revision: Union[str, None] = "001_implement_erm"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

difficulty_enum = postgresql.ENUM("1", "2", "3", "4", "5", name="difficulty")


def upgrade() -> None:
    """Change difficulty column from ENUM to INTEGER."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "question",
        "difficulty",
        existing_type=difficulty_enum,
        type_=sa.Integer(),
        existing_nullable=False,
        postgresql_using="difficulty::text::integer",
    )
    op.alter_column(
        "quiz",
        "difficulty",
        existing_type=difficulty_enum,
        type_=sa.Integer(),
        existing_nullable=False,
        postgresql_using="difficulty::text::integer",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Revert difficulty column from INTEGER to ENUM."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "quiz",
        "difficulty",
        existing_type=sa.Integer(),
        type_=difficulty_enum,
        existing_nullable=False,
        postgresql_using='difficulty::text::"difficulty"',
    )
    op.alter_column(
        "question",
        "difficulty",
        existing_type=sa.Integer(),
        type_=difficulty_enum,
        existing_nullable=False,
        postgresql_using='difficulty::text::"difficulty"',
    )
    # ### end Alembic commands ###
