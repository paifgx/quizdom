---
description:
globs: frontend/**/*
alwaysApply: false
---
## Dependencies
- Keep React, React DOM, React Router, Vite and Jest on latest stable major
- Upgrade soon after each stable release, unless a breaking change blocks the project

## Folder structure
- `frontend/app/` → app bootstrap: router, providers, ErrorBoundary
- `frontend/app/pages/` → route components (`*Page.tsx`)
- `frontend/app/layouts/` → layout wrappers with `<Outlet>`
- `frontend/app/components/` → shared UI pieces
- `frontend/app/features/` → domain modules (pages, logic, state)
- `frontend/app/hooks/` → custom hooks
- `frontend/app/lib/` → helpers (fetch, Zod, date utilities)
- `frontend/app/services/` → API clients
- `frontend/app/types/` → exported TypeScript types
- `frontend/app/styles/` → global CSS or Tailwind config
- Name files to reflect their sole responsibility
- Keep each file <200 lines where possible

## Routing
- Use React Router v7
- Define router in `frontend/app/router.tsx`, export `createBrowserRouter()`
- Provide global `ErrorBoundary` in `frontend/app/ErrorBoundary.tsx`
- Add layout routes in `frontend/app/layouts/`
- Lazy-load routes with `React.lazy` + `<Suspense>` fallback
- Limit nesting to three `<Outlet>` levels
- Use `<NavLink>` for active links, `<Link>` elsewhere
- Group related routes in same folder

## Data & state
- Fetch initial data in loader functions, not in `useEffect`
- Store Zod schemas next to loaders for validation
- Hold global state in React Context + `useReducer`
- Switch to Redux only if scale demands it
- Keep hooks pure and side-effect free
- Name state and dispatch actions clearly

## Styling & testing
- Use Tailwind first; fall back to CSS Modules when needed
- Write minimal comments—explain "why", not "how"
- Test every route with `@testing-library/react` + `MemoryRouter`
- Use Vitest for unit/integration tests
  - `pnpm test:unit` → unit
  - `pnpm test:integration` → integration
- Use Playwright for end-to-end
  - `pnpm test:e2e` → run all
  - `pnpm test:e2e:ui` → test UI
- Add snapshot tests only when markup must stay unchanged
- Enforce formatting with ESLint and Prettier

## TypeScript
- Forbid `any`
- Compile with `--strict` and `--noUncheckedIndexedAccess`
- Expose public types from `frontend/app/types/`
- Document public APIs with TSDoc

## Clean code & best practices
- Name functions, variables and components to reveal intent
- Keep functions small (ideally <20 lines)
- Apply single responsibility per module/component
- Eliminate duplication (DRY across hooks, utils, components)
- Favor pure functions and minimize hidden side-effects
- Write declarative code: use `map`, `filter`, `reduce` over loops
- Review code via PR checklist:
  - Naming
  - Error handling
  - Edge cases
  - Test coverage
  - Accessibility
- Refactor when patterns emerge; extract abstractions early

## Build & scripts
- `pnpm dev` → start Vite dev server
- `pnpm build` → build app
- `pnpm start` → serve production build
- `pnpm typecheck` → React Router typegen + `tsc`
- `pnpm lint` → run ESLint + Prettier

## Localization
- All user-facing content must be written in **German**
  - This includes labels, buttons, tooltips, help text, error messages, etc.
- All internal code (variable names, comments, filenames, etc.) must be written in **English**
- Mock data and test content must simulate real German-language usage
- Avoid mixed-language UI by ensuring all displayed text is consistently localized
