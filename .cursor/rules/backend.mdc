---
description: 
globs: backend/**
alwaysApply: false
---
## Dependencies
- FastAPI, Pydantic ≥ 2, SQLModel, Uvicorn[standard]
- Use uv for packaging and environment management (install tools and manage virtual environments)
- ruff for lint & format
- mypy for type checks

## Folder structure
- `backend/app/core/` → settings, db, security, logging
- `backend/app/api/` → versioned routers & shared deps
- `backend/app/models/` → SQLModel ORM classes
- `backend/app/schemas/` → Pydantic request/response models
- `backend/app/services/` → business logic & external APIs
- `backend/app/main.py` → FastAPI entry point
- `backend/migrations/` → Alembic revisions
- `backend/tests/` → pytest suites

## File sizing & naming
- Keep each endpoint file < 200 LOC; split larger ones
- Mirror source tree in `backend/tests/` for integration tests
- Define `router = APIRouter(prefix="…", tags=["…"])` per file

## Routing
- Use HTTP verbs matching intent (GET, POST, PUT, DELETE)
- Return typed Pydantic models; never raw dicts
- Use `starlette.status` constants for status codes
- Override dependencies in tests only; prod code uses defaults

## Business logic
- Keep endpoints thin; call into `services/*` for side effects
- Make services stateless; inject DB session via FastAPI deps
- Wrap external API calls in services to isolate failures

## Data layer
- Use async SQLModel with a single `sessionmaker` in `core/db.py`
- Never expose ORM models in responses; convert to schemas
- Keep migrations under `backend/migrations/`

## Validation & security
- Validate inbound data with Pydantic schemas
- Centralize auth in `core/security.py`; use OAuth2 password flow + JWT
- Rate-limit sensitive routes via `slowapi`

## Error handling & logging
- Register global handlers for `HTTPException` & `ValidationError`
- Log JSON lines via `structlog`; never use `print()`
- Return consistent error shape: `{ "detail": "…" }`

## Testing
- Use pytest + `fastapi.testclient.TestClient`
- Mock external services with `respx`
- Target ≥ 90 % branch coverage

## Type hints & style
- Forbid `# type: ignore`
- Run `mypy --strict`
- Enforce ruff rules `E,F,I,N`; auto-format on commit with pre-commit

## Build commands
- `uv run dev` – `uvicorn app.main:app --reload`
- `uv run test` – `pytest -q`
- `uv run lint` – `ruff check . && ruff format . && mypy`

## Templates (via @rule)
- `@endpoint-template.py` – router skeleton with CRUD stubs
- `@service-template.py` – async service class with repository pattern
