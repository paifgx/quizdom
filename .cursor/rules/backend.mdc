---
description: 
globs: backend/**
alwaysApply: false
---
## Dependencies
- FastAPI, **Pydantic ≥ 2**, SQLModel, Uvicorn[standard]
- Alembic for DB migrations
- **python -m venv** for virtual-env management
- **pip** for packaging (`setup.py`/`pyproject.toml`)
- **ruff** for lint & format
- **mypy --strict** for static typing
- pytest, respx, Faker for tests
- structlog for JSON logging
- slowapi for rate-limiting

## Folder structure
    backend/
      app/
        core/      # settings, db, security, logging
        api/       # versioned routers & shared deps
        models/    # SQLModel ORM classes
        schemas/   # Pydantic request/response models
        services/  # business logic & external APIs
        main.py    # FastAPI entry point
      migrations/  # Alembic revisions
      tests/       # pytest suites mirroring source tree

## Naming conventions
- `snake_case` → functions, variables, modules
- `PascalCase` → classes, Pydantic models
- `CONSTANT_CASE` → environment keys
- Router files: `<resource>_router.py` with
  `router = APIRouter(prefix="/v1/<resource>", tags=["<resource>"])`

## File size limits
| Artifact            | Max LOC |
|---------------------|---------|
| Router file         | **150** |
| Service module      | 200     |
| Model / schema file | 150     |

> Split a file when it reaches its limit.

## Routing
- Choose the correct HTTP verb (GET, POST, PUT, DELETE).
- Return typed Pydantic models—never raw dicts.
- Import status codes from `starlette.status`.
- Override dependencies only in tests.

## Business logic
- Keep endpoints thin; delegate to `services/*`.
- Services stay stateless; inject a DB session via dependency.
- Wrap outbound HTTP calls inside services to isolate failures.

## Data layer
- Async SQLModel with a single `sessionmaker` in `core/db.py`.
- Never expose ORM models; map to schemas inside services.
- Store migrations in `backend/migrations/`.

## Validation & security
- Validate every inbound payload with Pydantic schemas.
- Centralise auth in `core/security.py`.
  - OAuth2 password flow + JWT.
  - Access-token TTL 15 min; refresh-token TTL 7 days.
  - Include helper functions for token deny-lists.
- Rate-limit sensitive routes with slowapi decorators.

## Error handling & logging
- Global handlers for `HTTPException` and `ValidationError`.
- Return a consistent error shape:
````json
{
  "detail": "…",
  "code": "…",
  "field": "…",
  "hint": "…"
}
```
- Log as JSON lines with structlog; never call `print()`.

## Comments & documentation

- Write minimal comments—state **why**, not **how**.
- Add docstrings only to public interfaces.
- Prefix rationale comments with `# WHY:`.
- Each `TODO:` includes a ticket ID.

## Clean-Code principles

- Functions ≤ 20 lines, single abstraction level.
- Replace boolean flags with Enums.
- Keep magic numbers out of code; define constants.
- One reason to change per module.
- Dependency inversion chain: router → service interface → concrete class.
- Maintain `docs/ubiquitous.md` with domain terms.

## Testing

- **Unit**: services and utilities.
- **Router-level**: endpoints with `TestClient`.
- **E2E** (sparingly): critical user paths.
- Use Faker for data; avoid duplicated fixtures.
- Cover edge cases with `pytest.parametrize`.
- Mock outbound HTTP calls with respx.
- Pipeline fails if branch coverage < 90 %.
## Type hints & style

- Ban `# type: ignore`.
- Run `mypy --strict`.
- Enforce ruff rules `E,F,I,N`; auto-format in pre-commit.

## Commit & Git hygiene

- Follow Conventional Commits (`feat:`, `fix:`, `chore:` …).
- One logical change per commit; CI must stay green.

## CI/CD

GitHub Actions in `.github/workflows/ci.yml`:
1. `python -m venv .venv && . .venv/bin/activate && pip install -e .[dev]`
2. `ruff check . && ruff format . && mypy`
3. `pytest -q --maxfail=1 --disable-warnings`
4. Build & Publish Docker-Image

## API versioning

- Default: `/v<major>/…` in the path.
- Optional header `X-API-Version` to reduce URL churn.

## Build & Dev Commands
```bash
python -m venv .venv
source .venv/bin/activate
pip install -e .[dev]

# Development
uvicorn app.main:app --reload

# Lint & Typecheck
ruff check . && ruff format . && mypy

# Tests
pytest -q
```

## Localization
- **All API responses visible to users must be written in German**
  - Error messages, validation errors, and success messages returned to frontend
  - Database constraint violation messages
  - Business logic error descriptions
  - Email templates and notification content
- **All internal code must remain in English**
  - Variable names, function names, comments, filenames, and technical identifiers
  - Database table names, column names, and constraint names
  - API endpoint paths and parameter names
  - Configuration keys and environment variables
- **Use proper German grammar and terminology**
  - Follow German capitalization rules for error messages
  - Use appropriate formal/informal address (Sie/du) based on context
  - Ensure proper pluralization and gender agreement
- **Test data should simulate real German-language usage**
  - Test fixtures should use realistic German names, addresses, and content
  - Mock external API responses should be in German when simulating user-facing content
